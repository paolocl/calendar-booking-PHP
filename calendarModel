<?php
/**
 * Created by PhpStorm.
 * User: paolocastro
 * Date: 07/06/2016
 * Time: 19:11
 * Creation of a calendar in php with out JQUERY and with a form/input/typeRadio
 */
namespace App\Models\Calendar;

use Silex\Application;

class CalendarModel
{
    private $dayLabels = array("Lun","Mar","Mer","Jeu","Ven","Sam","Dim");
    private $currentYear=0;
    private $currentMonth=0;
    private $currentDay=0;
    private $currentDate=null;
    private $daysInMonth=0;
    private $naviHref= null;
    private $numbreOfDayToRemove = []; // ['14-6-2016',...]
    private $dayToRemove = []; //['Lundi','Mardi','Mercredi','Jeudi','Vendredi','Samedi','Dimanche']
    private $monthToRemove = []; //['01','02','03','04',..]

    /**
     * Constructor set the day, week and mounth to remove
     * CalendarModel constructor.
     * @param array $dayToRemove
     * @param array $numbreOfDayToRemove
     * @param array $monthToRemove
     */
    public function __construct($dayToRemove = [], $numbreOfDayToRemove = [],$monthToRemove=[]){
        $this->naviHref = htmlentities("http://$_SERVER[HTTP_HOST]$_SERVER[REDIRECT_URL]");
        $this->dayToRemove = $dayToRemove;
        $this->numbreOfDayToRemove = $numbreOfDayToRemove;
        $this->monthToRemove = $monthToRemove;
    }


    /**
     * print out the calendar
     * @return string
     */

    public function show() {

        $year = null;
        $month = null;

        if(null == $year && isset($_GET['year'])){
            $year = date('Y');
            if($_GET['year'] >= date('Y')){
                $year = $_GET['year'];
            }

        }else if(null==$year){
            $year = date("Y",time());
        }

        if(null==$month&&isset($_GET['month'])){
            $month = date('m');
            if($_GET['month'] >= date('m')){
                $month = $_GET['month'];
            }
        }else if(null==$month){
            $month = date("m",time());
        }
        $this->currentYear=$year;
        $this->currentMonth=$month;
        $this->daysInMonth=$this->_daysInMonth($month,$year);
        $content='<div id="calendar" class="calendar">'.
            '<div class="box">'.
                $this->_createNavi().
            '</div>'.
                '<div class="box-content">'.
                '<ul class="label day">'.$this->_createLabels().
            '</ul>';
            $content.='<div class="clear"></div>';
            $content.='<ul class="dates">';
            $weeksInMonth = $this->_weeksInMonth($month,$year);
            // Create weeks in a month
            for( $i=0; $i<$weeksInMonth; $i++ ){
                //Create days in a week
                for($j=1;$j<=7;$j++){
                    $content.=$this->_showDay($i*7+$j);
                }
            }
        $content.='</ul>';
        $content.='<div class="clear"></div>';
        $content.='</div>';
        $content.='</div>';
        return $content;
    }

    /**
     * create the table
     * @param $cellNumber
     * @return string
     */

    private function _showDay($cellNumber){
        $curMonth = $this->currentMonth==1?12:intval($this->currentMonth);

        if($this->currentDay==0){
            $firstDayOfTheWeek = date('N',strtotime($this->currentYear.'-'.$this->currentMonth.'-01'));
            if(intval($cellNumber) == intval($firstDayOfTheWeek)){
                $this->currentDay=1;
            }
        }
        if( ($this->currentDay!=0)&&($this->currentDay<=$this->daysInMonth) ){
            $this->currentDate = date('Y-m-d',strtotime($this->currentYear.'-'.$this->currentMonth.'-'.($this->currentDay)));
            $cellContent = $this->currentDay;
            $this->currentDay++;
        }else{
            $this->currentDate =null;
            $cellContent=null;
        }
        
        if($cellContent > date('j') && $curMonth >= date('m') && $cellContent != null  && !in_array("$cellContent-$curMonth-$this->currentYear",$this->numbreOfDayToRemove) && !in_array(strftime("%m",strtotime("$cellContent-$curMonth-$this->currentYear")),$this->monthToRemove) && !in_array(strftime("%A",strtotime("$cellContent-$curMonth-$this->currentYear")),$this->dayToRemove)){
            return "<li><input type='radio' name='date' value='$this->currentDate'  id='$cellContent'><label for='$cellContent' class='click' data-appear='arrondissement'>$cellContent</label></li>"/*.strftime("%A",strtotime("$cellContent-$curMonth-$this->currentYear"))."$cellContent/$curMonth/$this->currentYear"*/;
        }
        elseif(($cellContent <= date('j') && $curMonth == date('m') || in_array("$cellContent-$curMonth-$this->currentYear",$this->numbreOfDayToRemove) || in_array(strftime("%m",strtotime("$cellContent-$curMonth-$this->currentYear")),$this->monthToRemove) || in_array(strftime("%A",strtotime("$cellContent-$curMonth-$this->currentYear")),$this->dayToRemove)) && $cellContent != null)
        {
            return "<li><input type='radio' name='date' value='$this->currentDate' id='$cellContent' disabled='disabled' class='disabled'><label for='$cellContent'>$cellContent</label></li>";
        }
        elseif($cellContent == null)
        {
            return "<li><input type='radio' name='date' value='$this->currentDate' id='$cellContent' disabled='disabled' ><label for='$cellContent' class='emptyDate'>$cellContent</label></li>";
        }else{
            return "<li><input type='radio' name='date' value='$this->currentDate'  id='$cellContent'><label for='$cellContent' class='click' data-appear='arrondissement'>$cellContent</label></li>";
        }
    }

    /**
     * create navigation
     * @return string
     */

    private function _createNavi(){
        setlocale(LC_TIME, 'fr_FR.UTF8', 'fr.UTF8', 'fr_FR.UTF-8', 'fr.UTF-8');
        $nextMonth = $this->currentMonth==12?1:intval($this->currentMonth)+1;
        $nextYear = $this->currentMonth==12?intval($this->currentYear)+1:$this->currentYear;
        $preMonth = $this->currentMonth==1?12:intval($this->currentMonth)-1;
        $preYear = $this->currentMonth==1?intval($this->currentYear)-1:$this->currentYear;

        if($preMonth >= date('m')){
            return '<div class="header">'.
                '<a class="prev calendarNav" href="'.$this->naviHref.'?month='.sprintf('%02d',$preMonth).'&year='.$preYear.'" data-mounth="'.sprintf('%02d',$preMonth).'" data-year="'.$preYear.'">Précèdent</a>'.
                '<span class="title">'.strftime('%B %Y',strtotime($this->currentYear.'-'.$this->currentMonth.'-1')).'</span>'.
                '<a class="next calendarNav" href="'.$this->naviHref.'?month='.sprintf("%02d", $nextMonth).'&year='.$nextYear.'" data-mounth="'.sprintf('%02d',$nextMonth).'" data-year="'.$nextYear.'">Suivant</a>'.
                '</div>';
        }else{
            return '<div class="header">'.
            '<a class="disabled">Précèdent</a>'.
            '<span class="title">'.strftime('%B %Y',strtotime($this->currentYear.'-'.$this->currentMonth.'-1')).'</span>'.
            '<a class="next calendarNav" href="'.$this->naviHref.'?month='.sprintf("%02d", $nextMonth).'&year='.$nextYear.'" data-mounth="'.sprintf('%02d',$nextMonth).'" data-year="'.$nextYear.'">Suivant</a>'.
            '</div>';
        }
    }

    /**
     * create calendar week label
     * @return string
     */
    private function _createLabels(){
        $content='';
        foreach($this->dayLabels as $index=>$label){
            $content.='<li class="'.($label==6?'end title':'start title').' title">'.$label.'</li>';
        }
        return $content;
    }

    /**
     * calculate number of weeks in a particular month
     * @param null $month
     * @param null $year
     * @return int
     */
    private function _weeksInMonth($month = null, $year = null){
        if( null==($year) ) {
            $year = date("Y",time());
        }
        if(null==($month)) {
            $month = date("m",time());
        }
        // find number of days in this month
        $daysInMonths = $this->_daysInMonth($month,$year);
        $numOfweeks = ($daysInMonths%7==0?0:1) + intval($daysInMonths/7);
        $monthEndingDay= date('N',strtotime($year.'-'.$month.'-'.$daysInMonths));
        $monthStartDay = date('N',strtotime($year.'-'.$month.'-01'));
        if($monthEndingDay<$monthStartDay){
             $numOfweeks++;
        }
        return $numOfweeks;
    }

    /**
     * calculate number of days in a particular month
     * @param null $month
     * @param null $year
     * @return bool|string
     */
    private function _daysInMonth($month = null, $year = null)
    {
        if (null == ($year)) {
            $year = date("Y", time());
        }
        if (null == ($month)) {
            $month = date("m", time());
        }
        return date('t', strtotime($year . '-' . $month . '-01'));
    }
}
